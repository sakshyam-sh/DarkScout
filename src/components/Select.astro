---
import { COUNTRIES } from '../data';
import type { CountryProps } from '../data';

interface Props {
    width?: string;
    height?: string;
    label?: string;
    name: string;
    required?: boolean;
    options?: CountryProps[];
}

interface Props {
    width?: string;
    height?: string;
    label?: string;
    name: string;
    required?: boolean;
    options?: CountryProps[];
}
const {
    width = '100%',
    height,
    label,
    name,
    required = false,
    options = COUNTRIES
} = Astro.props;
---

<div class="select-group">
    {label && <label for={name}>{label}</label>}
    <div class="select-wrapper">
        <select name={name} required={required} class="native-select">
            {options.map((option) => (
            <option value={option.name} data-icon={option.icon}>
                {option.name}
            </option>
            ))}
        </select>
        <div class="custom-select">
            <div class="selected-option">
                <span class="selected-icon"></span>
                <span class="selected-text"></span>
            </div>
            <div class="custom-arrow"></div>
        </div>
        <ul class="custom-options">
            {options.map((option) => (
            <li data-value={option.name}>
                <span class="icon" set:html={option.icon}></span>
                {option.name}
            </li>
            ))}
        </ul>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const selectGroups = document.querySelectorAll('.select-group');

    selectGroups.forEach(group => {
        const select = group.querySelector('.native-select') as HTMLSelectElement;
        const customSelect = group.querySelector('.custom-select');
        const selectedText = group.querySelector('.selected-text');
        const selectedIcon = group.querySelector('.selected-icon');
        const customOptions = group.querySelector('.custom-options');

        if (select && selectedText && selectedIcon) {
            const selectedOption = select.options[select.selectedIndex];
            selectedText.textContent = selectedOption.text;
            selectedIcon.innerHTML = selectedOption.getAttribute('data-icon') || '';
        }

        select?.querySelectorAll('option').forEach((option, index) => {
            const icon = option.getAttribute('data-icon');
            const customOption = customOptions?.querySelectorAll('li')[index];

            if (customOption) {
                const iconSpan = customOption.querySelector('.icon');
                if (iconSpan && icon) {
                    iconSpan.innerHTML = icon;
                }
            }
        });

        customSelect?.addEventListener('click', () => {
            customOptions?.classList.toggle('show');
        });

        customOptions?.addEventListener('click', (e) => {
            const listItem = (e.target as HTMLElement).closest('li');
            if (listItem) {
                const value = listItem.getAttribute('data-value');
                const icon = listItem.querySelector('.icon')?.innerHTML;

                if (select && value) {
                    select.value = value;
                    if (selectedText) selectedText.textContent = value;
                    if (selectedIcon && icon) selectedIcon.innerHTML = icon;

                    select.dispatchEvent(new Event('change', { bubbles: true }));
                    customOptions?.classList.remove('show');
                }
            }
        });

        document.addEventListener('click', (e) => {
            if (!customSelect?.contains(e.target as Node) &&
                !customOptions?.contains(e.target as Node)) {
                customOptions?.classList.remove('show');
            }
        });
    });
});
</script>

<style define:vars={{ width: width, height: height }}>
.select-group {
    display: flex;
    flex-direction: column;
    width: 100%;
    position: relative;
}
label {
    color: #C9CAE9;
    font-weight: 500;
    font-size: 14px;
    line-height: 20px;
}
.select-wrapper {
    position: relative;
    width: 100%;
    margin: 12px 0 0 0;
}
.native-select {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}
.custom-select {
    width: var(--width);
    height: var(--height, auto);
    background: transparent;
    border: 1px solid #2B2E69;
    border-radius: 6px;
    color: #CBD5E1;
    font-size: 16px;
    font-weight: 400;
    line-height: 24px;
    padding: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.custom-select:focus-within {
    outline: none;
    border: 1px solid #4338CA;
}
.selected-option {
    display: flex;
    align-items: center;
    gap: 8px;
}
.selected-icon {
    display: inline-flex;
    align-items: center;
    width: 20px;
    height: 20px;
}
.selected-icon svg {
    width: 100%;
    height: 100%;
}
.custom-arrow {
    width: 10px;
    height: 6px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='10' height='6' viewBox='0 0 10 6'%3E%3Cpath fill='none' stroke='%23CBD5E1' stroke-width='1.5' d='M1 1l4 4 4-4'/%3E%3C/svg%3E");
    pointer-events: none;
}
.custom-options {
    display: none;
    list-style: none;
    margin: 0;
    padding: 0;
    border: 1px solid #2B2E69;
    border-radius: 6px;
    background-color: #1c1a43;
    color: #CBD5E1;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 10;
    max-height: 200px;
    overflow-y: auto;
}
.custom-options.show {
    display: block;
}
.custom-options li {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    cursor: pointer;
}
.custom-options li:hover {
    background-color: #2B2E69;
}
.icon {
    display: inline-flex;
    margin-right: 8px;
    width: 20px;
    height: 20px;
    align-items: center;
}
.icon svg {
    width: 100%;
    height: 100%;
}
</style>
